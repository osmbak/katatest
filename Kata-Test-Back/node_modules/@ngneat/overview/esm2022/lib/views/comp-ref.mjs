import { createComponent, } from '@angular/core';
export class CompRef {
    constructor(options) {
        this.options = options;
        if (options.vcr) {
            this.ref = options.vcr.createComponent(options.component, {
                index: options.vcr.length,
                injector: options.injector || options.vcr.injector,
            });
        }
        else {
            this.ref = createComponent(options.component, {
                elementInjector: options.injector,
                environmentInjector: options.environmentInjector,
            });
            options.appRef.attachView(this.ref.hostView);
        }
    }
    setInput(input, value) {
        this.ref.setInput(input, value);
        return this;
    }
    setInputs(inputs) {
        Object.keys(inputs).forEach((input) => {
            this.ref.setInput(input, inputs[input]);
        });
        return this;
    }
    detectChanges() {
        this.ref.hostView.detectChanges();
        return this;
    }
    updateContext(context) {
        this.options.contextSignal?.set(context);
        return this;
    }
    appendTo(container) {
        container.appendChild(this.getElement());
        return this;
    }
    removeFrom(container) {
        container.removeChild(this.getElement());
        return this;
    }
    getRawContent() {
        return this.getElement().outerHTML;
    }
    getElement() {
        return this.ref.location.nativeElement;
    }
    destroy() {
        this.ref.destroy();
        !this.options.vcr && this.options.appRef.detachView(this.ref.hostView);
        this.ref = null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcC1yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ25lYXQvb3ZlcnZpZXcvc3JjL2xpYi92aWV3cy9jb21wLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR0wsZUFBZSxHQU1oQixNQUFNLGVBQWUsQ0FBQztBQVl2QixNQUFNLE9BQU8sT0FBTztJQUdsQixZQUFvQixPQUErQjtRQUEvQixZQUFPLEdBQVAsT0FBTyxDQUF3QjtRQUNqRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDZixJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3hELEtBQUssRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU07Z0JBQ3pCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUTthQUNuRCxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsSUFBSSxDQUFDLEdBQUcsR0FBRyxlQUFlLENBQU8sT0FBTyxDQUFDLFNBQVMsRUFBRTtnQkFDbEQsZUFBZSxFQUFFLE9BQU8sQ0FBQyxRQUFRO2dCQUNqQyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsbUJBQW1CO2FBQ2pELENBQUMsQ0FBQztZQUNILE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDOUM7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUF5QyxLQUFRLEVBQUUsS0FBYztRQUN2RSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFMUMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQXVDO1FBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYTtRQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRWxDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUFnQjtRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsUUFBUSxDQUFDLFNBQWtCO1FBQ3pCLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsVUFBVSxDQUFDLFNBQWtCO1FBQzNCLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFwcGxpY2F0aW9uUmVmLFxuICBDb21wb25lbnRSZWYsXG4gIGNyZWF0ZUNvbXBvbmVudCxcbiAgRW52aXJvbm1lbnRJbmplY3RvcixcbiAgSW5qZWN0b3IsXG4gIFR5cGUsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIFdyaXRhYmxlU2lnbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEV4Y2x1ZGVGdW5jdGlvbnMsIFZpZXdSZWYgfSBmcm9tICcuL3R5cGVzJztcblxuaW50ZXJmYWNlIE9wdGlvbnM8Q29tcCwgQ29udGV4dD4ge1xuICBjb21wb25lbnQ6IFR5cGU8Q29tcD47XG4gIGluamVjdG9yOiBJbmplY3RvcjtcbiAgZW52aXJvbm1lbnRJbmplY3RvcjogRW52aXJvbm1lbnRJbmplY3RvcjtcbiAgdmNyOiBWaWV3Q29udGFpbmVyUmVmIHwgdW5kZWZpbmVkO1xuICBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmIHwgdW5kZWZpbmVkO1xuICBjb250ZXh0U2lnbmFsPzogV3JpdGFibGVTaWduYWw8Q29udGV4dD47XG59XG5cbmV4cG9ydCBjbGFzcyBDb21wUmVmPENvbXAsIENvbnRleHQgPSBhbnk+IGltcGxlbWVudHMgVmlld1JlZiB7XG4gIHJlZjogQ29tcG9uZW50UmVmPENvbXA+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0aW9uczogT3B0aW9uczxDb21wLCBDb250ZXh0Pikge1xuICAgIGlmIChvcHRpb25zLnZjcikge1xuICAgICAgdGhpcy5yZWYgPSBvcHRpb25zLnZjci5jcmVhdGVDb21wb25lbnQob3B0aW9ucy5jb21wb25lbnQsIHtcbiAgICAgICAgaW5kZXg6IG9wdGlvbnMudmNyLmxlbmd0aCxcbiAgICAgICAgaW5qZWN0b3I6IG9wdGlvbnMuaW5qZWN0b3IgfHwgb3B0aW9ucy52Y3IuaW5qZWN0b3IsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWYgPSBjcmVhdGVDb21wb25lbnQ8Q29tcD4ob3B0aW9ucy5jb21wb25lbnQsIHtcbiAgICAgICAgZWxlbWVudEluamVjdG9yOiBvcHRpb25zLmluamVjdG9yLFxuICAgICAgICBlbnZpcm9ubWVudEluamVjdG9yOiBvcHRpb25zLmVudmlyb25tZW50SW5qZWN0b3IsXG4gICAgICB9KTtcbiAgICAgIG9wdGlvbnMuYXBwUmVmLmF0dGFjaFZpZXcodGhpcy5yZWYuaG9zdFZpZXcpO1xuICAgIH1cbiAgfVxuXG4gIHNldElucHV0PEsgZXh0ZW5kcyBrZXlvZiBFeGNsdWRlRnVuY3Rpb25zPENvbXA+PihpbnB1dDogSywgdmFsdWU6IENvbXBbS10pIHtcbiAgICB0aGlzLnJlZi5zZXRJbnB1dChpbnB1dCBhcyBzdHJpbmcsIHZhbHVlKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0SW5wdXRzKGlucHV0czogUGFydGlhbDxFeGNsdWRlRnVuY3Rpb25zPENvbXA+Pikge1xuICAgIE9iamVjdC5rZXlzKGlucHV0cykuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIHRoaXMucmVmLnNldElucHV0KGlucHV0LCBpbnB1dHNbaW5wdXRdKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGV0ZWN0Q2hhbmdlcygpIHtcbiAgICB0aGlzLnJlZi5ob3N0Vmlldy5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHVwZGF0ZUNvbnRleHQoY29udGV4dDogQ29udGV4dCkge1xuICAgIHRoaXMub3B0aW9ucy5jb250ZXh0U2lnbmFsPy5zZXQoY29udGV4dCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFwcGVuZFRvKGNvbnRhaW5lcjogRWxlbWVudCkge1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmdldEVsZW1lbnQoKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbW92ZUZyb20oY29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuZ2V0RWxlbWVudCgpKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0UmF3Q29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbGVtZW50KCkub3V0ZXJIVE1MO1xuICB9XG5cbiAgZ2V0RWxlbWVudDxUIGV4dGVuZHMgRWxlbWVudD4oKTogVCB7XG4gICAgcmV0dXJuIHRoaXMucmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMucmVmLmRlc3Ryb3koKTtcbiAgICAhdGhpcy5vcHRpb25zLnZjciAmJiB0aGlzLm9wdGlvbnMuYXBwUmVmLmRldGFjaFZpZXcodGhpcy5yZWYuaG9zdFZpZXcpO1xuICAgIHRoaXMucmVmID0gbnVsbDtcbiAgfVxufVxuIl19