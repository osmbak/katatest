import { ApplicationRef, EnvironmentInjector, inject, Injectable, InjectionToken, Injector, signal, } from '@angular/core';
import { isComponent, isString, isTemplateRef } from './types';
import { TplRef } from './template-ref';
import { StringRef } from './string-ref';
import { CompRef } from './comp-ref';
import * as i0 from "@angular/core";
export const VIEW_CONTEXT = new InjectionToken('Component context');
export class ViewService {
    constructor() {
        this.injector = inject(Injector);
        this.appRef = inject(ApplicationRef);
        this.environmentInjector = inject(EnvironmentInjector);
    }
    createComponent(component, options = {}) {
        let injector = options.injector ?? this.injector;
        let contextSignal;
        if (options.context) {
            contextSignal = signal(options.context);
            injector = Injector.create({
                providers: [{
                        provide: VIEW_CONTEXT,
                        useValue: contextSignal.asReadonly()
                    }],
                parent: injector
            });
        }
        return new CompRef({
            component,
            vcr: options.vcr,
            injector,
            appRef: this.appRef,
            environmentInjector: options.environmentInjector || this.environmentInjector,
            contextSignal
        });
    }
    createTemplate(tpl, options = {}) {
        return new TplRef({
            vcr: options.vcr,
            appRef: this.appRef,
            tpl,
            context: options.context,
            injector: options.injector
        });
    }
    createView(content, viewOptions = {}) {
        if (isTemplateRef(content)) {
            return this.createTemplate(content, viewOptions);
        }
        else if (isComponent(content)) {
            return this.createComponent(content, viewOptions);
        }
        else if (isString(content)) {
            return new StringRef(content);
        }
        else {
            throw 'Type of content is not supported';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: ViewService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: ViewService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: ViewService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export function injectViewContext() {
    return inject(VIEW_CONTEXT);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL3ZpZXdzL3ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGNBQWMsRUFBRSxtQkFBbUIsRUFDbkMsTUFBTSxFQUNOLFVBQVUsRUFBRSxjQUFjLEVBQzFCLFFBQVEsRUFBVSxNQUFNLEdBSXpCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBVSxXQUFXLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBVSxNQUFNLFNBQVMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDOztBQWtCckMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFrQixtQkFBbUIsQ0FBQyxDQUFDO0FBR3JGLE1BQU0sT0FBTyxXQUFXO0lBRHhCO1FBRVUsYUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixXQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hDLHdCQUFtQixHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBb0QzRDtJQWxEQyxlQUFlLENBQWdCLFNBQXFCLEVBQUUsVUFBb0MsRUFBRTtRQUMxRixJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDakQsSUFBSSxhQUFrRCxDQUFDO1FBRXZELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNuQixhQUFhLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN4QyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDekIsU0FBUyxFQUFFLENBQUM7d0JBQ1YsT0FBTyxFQUFFLFlBQVk7d0JBQ3JCLFFBQVEsRUFBRSxhQUFhLENBQUMsVUFBVSxFQUFFO3FCQUNyQyxDQUFDO2dCQUNGLE1BQU0sRUFBRSxRQUFRO2FBQ2pCLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBZ0I7WUFDaEMsU0FBUztZQUNULEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztZQUNoQixRQUFRO1lBQ1IsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsbUJBQW1CO1lBQzVFLGFBQWE7U0FDZCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsY0FBYyxDQUFVLEdBQXlCLEVBQUUsVUFBK0IsRUFBRTtRQUNsRixPQUFPLElBQUksTUFBTSxDQUFDO1lBQ2hCLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztZQUNoQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsR0FBRztZQUNILE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztZQUN4QixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7U0FDM0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQU1ELFVBQVUsQ0FBNkIsT0FBVSxFQUFFLGNBQW9DLEVBQUU7UUFDdkYsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztTQUNsRDthQUFNLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQy9CLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDbkQ7YUFBTSxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUM1QixPQUFPLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQy9CO2FBQU07WUFDTCxNQUFNLGtDQUFrQyxDQUFDO1NBQzFDO0lBQ0gsQ0FBQzs4R0F0RFUsV0FBVztrSEFBWCxXQUFXLGNBREUsTUFBTTs7MkZBQ25CLFdBQVc7a0JBRHZCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOztBQTBEbEMsTUFBTSxVQUFVLGlCQUFpQjtJQUMvQixPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQWMsQ0FBQztBQUMzQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXBwbGljYXRpb25SZWYsIEVudmlyb25tZW50SW5qZWN0b3IsXG4gIGluamVjdCxcbiAgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sXG4gIEluamVjdG9yLCBTaWduYWwsIHNpZ25hbCxcbiAgVGVtcGxhdGVSZWYsXG4gIFR5cGUsXG4gIFZpZXdDb250YWluZXJSZWYsIFdyaXRhYmxlU2lnbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29udGVudCwgaXNDb21wb25lbnQsIGlzU3RyaW5nLCBpc1RlbXBsYXRlUmVmLCBWaWV3UmVmfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFRwbFJlZiB9IGZyb20gJy4vdGVtcGxhdGUtcmVmJztcbmltcG9ydCB7IFN0cmluZ1JlZiB9IGZyb20gJy4vc3RyaW5nLXJlZic7XG5pbXBvcnQgeyBDb21wUmVmIH0gZnJvbSAnLi9jb21wLXJlZic7XG5cbmludGVyZmFjZSBfVmlld09wdGlvbnMge1xuICB2Y3I/OiBWaWV3Q29udGFpbmVyUmVmIHwgdW5kZWZpbmVkO1xuICBpbmplY3Rvcj86IEluamVjdG9yIHwgdW5kZWZpbmVkO1xufVxuXG5pbnRlcmZhY2UgVGVtcGxhdGVWaWV3T3B0aW9ucyBleHRlbmRzIF9WaWV3T3B0aW9ucyB7XG4gIGNvbnRleHQ/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgdW5kZWZpbmVkO1xufVxuXG5pbnRlcmZhY2UgQ29tcFZpZXdPcHRpb25zPENvbnRleHQgPSBhbnk+IGV4dGVuZHMgX1ZpZXdPcHRpb25zIHtcbiAgZW52aXJvbm1lbnRJbmplY3Rvcj86IEVudmlyb25tZW50SW5qZWN0b3IgfCB1bmRlZmluZWQ7XG4gIGNvbnRleHQ/OiBDb250ZXh0IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgdHlwZSBWaWV3T3B0aW9uczxDb250ZXh0ID0gYW55PiA9IF9WaWV3T3B0aW9ucyAmIENvbXBWaWV3T3B0aW9uczxDb250ZXh0PiAmIFRlbXBsYXRlVmlld09wdGlvbnM7XG5cbmV4cG9ydCBjb25zdCBWSUVXX0NPTlRFWFQgPSBuZXcgSW5qZWN0aW9uVG9rZW48U2lnbmFsPHVua25vd24+PignQ29tcG9uZW50IGNvbnRleHQnKTtcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBWaWV3U2VydmljZSB7XG4gIHByaXZhdGUgaW5qZWN0b3IgPSBpbmplY3QoSW5qZWN0b3IpO1xuICBwcml2YXRlIGFwcFJlZiA9IGluamVjdChBcHBsaWNhdGlvblJlZik7XG4gIHByaXZhdGUgZW52aXJvbm1lbnRJbmplY3RvciA9IGluamVjdChFbnZpcm9ubWVudEluamVjdG9yKTtcblxuICBjcmVhdGVDb21wb25lbnQ8Q29tcCwgQ29udGV4dD4oY29tcG9uZW50OiBUeXBlPENvbXA+LCBvcHRpb25zOiBDb21wVmlld09wdGlvbnM8Q29udGV4dD4gPSB7fSkge1xuICAgIGxldCBpbmplY3RvciA9IG9wdGlvbnMuaW5qZWN0b3IgPz8gdGhpcy5pbmplY3RvcjtcbiAgICBsZXQgY29udGV4dFNpZ25hbDogV3JpdGFibGVTaWduYWw8Q29udGV4dD4gfCB1bmRlZmluZWQ7XG5cbiAgICBpZiAob3B0aW9ucy5jb250ZXh0KSB7XG4gICAgICBjb250ZXh0U2lnbmFsID0gc2lnbmFsKG9wdGlvbnMuY29udGV4dCk7XG4gICAgICBpbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZSh7XG4gICAgICAgIHByb3ZpZGVyczogW3tcbiAgICAgICAgICBwcm92aWRlOiBWSUVXX0NPTlRFWFQsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbnRleHRTaWduYWwuYXNSZWFkb25seSgpXG4gICAgICAgIH1dLFxuICAgICAgICBwYXJlbnQ6IGluamVjdG9yXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENvbXBSZWY8Q29tcCwgQ29udGV4dD4oe1xuICAgICAgY29tcG9uZW50LFxuICAgICAgdmNyOiBvcHRpb25zLnZjcixcbiAgICAgIGluamVjdG9yLFxuICAgICAgYXBwUmVmOiB0aGlzLmFwcFJlZixcbiAgICAgIGVudmlyb25tZW50SW5qZWN0b3I6IG9wdGlvbnMuZW52aXJvbm1lbnRJbmplY3RvciB8fCB0aGlzLmVudmlyb25tZW50SW5qZWN0b3IsXG4gICAgICBjb250ZXh0U2lnbmFsXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVUZW1wbGF0ZTxDb250ZXh0Pih0cGw6IFRlbXBsYXRlUmVmPENvbnRleHQ+LCBvcHRpb25zOiBUZW1wbGF0ZVZpZXdPcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFRwbFJlZih7XG4gICAgICB2Y3I6IG9wdGlvbnMudmNyLFxuICAgICAgYXBwUmVmOiB0aGlzLmFwcFJlZixcbiAgICAgIHRwbCxcbiAgICAgIGNvbnRleHQ6IG9wdGlvbnMuY29udGV4dCxcbiAgICAgIGluamVjdG9yOiBvcHRpb25zLmluamVjdG9yXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVWaWV3PENvbXAsIENvbnRleHQ+KGNvbnRlbnQ6IFR5cGU8Q29tcD4sIHZpZXdPcHRpb25zOiBDb21wVmlld09wdGlvbnM8Q29udGV4dD4pOiBDb21wUmVmPENvbXAsIENvbnRleHQ+O1xuICBjcmVhdGVWaWV3PFQ+KGNvbnRlbnQ6IFRlbXBsYXRlUmVmPFQ+LCB2aWV3T3B0aW9uczogVGVtcGxhdGVWaWV3T3B0aW9ucyk6IFRwbFJlZjxUPjtcbiAgY3JlYXRlVmlldyhjb250ZW50OiBzdHJpbmcpOiBTdHJpbmdSZWY7XG4gIGNyZWF0ZVZpZXcoY29udGVudDogQ29udGVudCwgdmlld09wdGlvbnM/OiBWaWV3T3B0aW9ucyk6IFZpZXdSZWY7XG4gIGNyZWF0ZVZpZXc8VCBleHRlbmRzIENvbnRlbnQsIENvbnRleHQ+KGNvbnRlbnQ6IFQsIHZpZXdPcHRpb25zOiBWaWV3T3B0aW9uczxDb250ZXh0PiA9IHt9KTogVmlld1JlZiB7XG4gICAgaWYgKGlzVGVtcGxhdGVSZWYoY29udGVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRlbXBsYXRlKGNvbnRlbnQsIHZpZXdPcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKGlzQ29tcG9uZW50KGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVDb21wb25lbnQoY29udGVudCwgdmlld09wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcoY29udGVudCkpIHtcbiAgICAgIHJldHVybiBuZXcgU3RyaW5nUmVmKGNvbnRlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyAnVHlwZSBvZiBjb250ZW50IGlzIG5vdCBzdXBwb3J0ZWQnO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Vmlld0NvbnRleHQ8VD4oKSB7XG4gIHJldHVybiBpbmplY3QoVklFV19DT05URVhUKSBhcyBTaWduYWw8VD47XG59XG4iXX0=