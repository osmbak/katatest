import { Directive, Input, ViewContainerRef, inject } from '@angular/core';
import { TeleportService } from './teleport.service';
import * as i0 from "@angular/core";
export class TeleportOutletDirective {
    constructor() {
        this.vcr = inject(ViewContainerRef);
        this.service = inject(TeleportService);
    }
    ngOnChanges(changes) {
        // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used
        // as keys for the `ports` map.
        if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {
            this.service.ports.set(this.teleportOutlet, this.vcr);
            this.service.newOutlet(this.teleportOutlet);
        }
    }
    ngOnDestroy() {
        this.service.ports.delete(this.teleportOutlet);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: TeleportOutletDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.4", type: TeleportOutletDirective, isStandalone: true, selector: "[teleportOutlet]", inputs: { teleportOutlet: "teleportOutlet" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: TeleportOutletDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[teleportOutlet]',
                    standalone: true,
                }]
        }], propDecorators: { teleportOutlet: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZXBvcnQtb3V0bGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL3RlbGVwb3J0L3RlbGVwb3J0LW91dGxldC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXVDLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBTXJELE1BQU0sT0FBTyx1QkFBdUI7SUFKcEM7UUFPVSxRQUFHLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDL0IsWUFBTyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztLQWMzQztJQVpDLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQywrRkFBK0Y7UUFDL0YsK0JBQStCO1FBQy9CLElBQUksT0FBTyxDQUFDLGNBQWMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssUUFBUSxFQUFFO1lBQ3JFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDakQsQ0FBQzs4R0FqQlUsdUJBQXVCO2tHQUF2Qix1QkFBdUI7OzJGQUF2Qix1QkFBdUI7a0JBSm5DLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsVUFBVSxFQUFFLElBQUk7aUJBQ2pCOzhCQUdVLGNBQWM7c0JBQXRCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgVmlld0NvbnRhaW5lclJlZiwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUZWxlcG9ydFNlcnZpY2UgfSBmcm9tICcuL3RlbGVwb3J0LnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdGVsZXBvcnRPdXRsZXRdJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgVGVsZXBvcnRPdXRsZXREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIC8vIFdlIGNvdWxkJ3ZlIGFsc28gdXNlZCB0aGUgYG5nQWNjZXB0SW5wdXRUeXBlYCwgYnV0IGl0J3MgYmVpbmcgZGVwcmVjYXRlZCBpbiBuZXdlciBBbmd1bGFyIHZlcnNpb25zLlxuICBASW5wdXQoKSB0ZWxlcG9ydE91dGxldDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSB2Y3IgPSBpbmplY3QoVmlld0NvbnRhaW5lclJlZik7XG4gIHByaXZhdGUgc2VydmljZSA9IGluamVjdChUZWxlcG9ydFNlcnZpY2UpO1xuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAvLyBUaGUgYHRlbGVwb3J0T3V0bGV0YCBtaWdodCBiZSBgbnVsbHx1bmRlZmluZWRgLCBidXQgd2UgZG9uJ3Qgd2FudCBudWxsYWJsZSB2YWx1ZXMgdG8gYmUgdXNlZFxuICAgIC8vIGFzIGtleXMgZm9yIHRoZSBgcG9ydHNgIG1hcC5cbiAgICBpZiAoY2hhbmdlcy50ZWxlcG9ydE91dGxldCAmJiB0eXBlb2YgdGhpcy50ZWxlcG9ydE91dGxldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuc2VydmljZS5wb3J0cy5zZXQodGhpcy50ZWxlcG9ydE91dGxldCwgdGhpcy52Y3IpO1xuICAgICAgdGhpcy5zZXJ2aWNlLm5ld091dGxldCh0aGlzLnRlbGVwb3J0T3V0bGV0KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnNlcnZpY2UucG9ydHMuZGVsZXRlKHRoaXMudGVsZXBvcnRPdXRsZXQpO1xuICB9XG59XG4iXX0=