import { Directive, Input, TemplateRef, ViewContainerRef, inject, } from '@angular/core';
import { isComponent, isString } from '../views/types';
import { ViewService } from '../views/view';
import { DynamicViewComponent } from './dynamic-view.component';
import * as i0 from "@angular/core";
export class DynamicViewDirective {
    constructor() {
        this.defaultTpl = inject(TemplateRef);
        this.vcr = inject(ViewContainerRef);
        this.viewService = inject(ViewService);
    }
    ngOnInit() {
        this.resolveContentType();
    }
    ngOnChanges(changes) {
        const viewChanged = changes.view && !changes.view.isFirstChange();
        const contextChanged = changes.context && !changes.context.isFirstChange();
        const inputsChanged = changes.inputs && !changes.inputs.isFirstChange();
        if (viewChanged) {
            this.resolveContentType();
        }
        else if (contextChanged) {
            this.viewRef.updateContext(this.context);
        }
        else if (isComponent(this.view) && inputsChanged) {
            this.viewRef.setInputs(this.inputs || {});
        }
    }
    resolveContentType() {
        this.viewRef?.destroy();
        if (isString(this.view)) {
            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {
                vcr: this.vcr,
                injector: this.injector,
            });
            this.viewRef.setInput('content', this.view).detectChanges();
        }
        else if (isComponent(this.view)) {
            this.viewRef = this.viewService.createComponent(this.view, {
                vcr: this.vcr,
                injector: this.injector ?? this.vcr.injector,
                context: this.context,
            });
            if (this.inputs) {
                this.viewRef.setInputs(this.inputs);
            }
        }
        else {
            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {
                vcr: this.vcr,
                injector: this.injector ?? this.vcr.injector,
                context: this.context,
            });
        }
    }
    ngOnDestroy() {
        this.viewRef?.destroy();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: DynamicViewDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.4", type: DynamicViewDirective, isStandalone: true, selector: "[dynamicView]", inputs: { view: ["dynamicView", "view"], injector: ["dynamicViewInjector", "injector"], context: ["dynamicViewContext", "context"], inputs: ["dynamicViewInputs", "inputs"] }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: DynamicViewDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dynamicView]',
                    standalone: true,
                }]
        }], propDecorators: { view: [{
                type: Input,
                args: ['dynamicView']
            }], injector: [{
                type: Input,
                args: ['dynamicViewInjector']
            }], context: [{
                type: Input,
                args: ['dynamicViewContext']
            }], inputs: [{
                type: Input,
                args: ['dynamicViewInputs']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy12aWV3LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL2R5bmFtaWMtdmlldy9keW5hbWljLXZpZXcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUtMLFdBQVcsRUFDWCxnQkFBZ0IsRUFDaEIsTUFBTSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBVyxXQUFXLEVBQUUsUUFBUSxFQUFXLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFNaEUsTUFBTSxPQUFPLG9CQUFvQjtJQUpqQztRQVdVLGVBQVUsR0FBcUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ25ELFFBQUcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMvQixnQkFBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztLQWtEM0M7SUFoREMsUUFBUTtRQUNOLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbEUsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDM0UsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFeEUsSUFBSSxXQUFXLEVBQUU7WUFDZixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMzQjthQUFNLElBQUksY0FBYyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMxQzthQUFNLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLEVBQUU7WUFDakQsSUFBSSxDQUFDLE9BQXdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUM7U0FDN0Q7SUFDSCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFDeEIsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLEVBQUU7Z0JBQ3BFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztnQkFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7YUFDeEIsQ0FBQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLE9BQXlDLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDaEc7YUFBTSxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUN6RCxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRO2dCQUM1QyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87YUFDdEIsQ0FBQyxDQUFDO1lBRUgsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNkLElBQUksQ0FBQyxPQUF3QixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkQ7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ3ZFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztnQkFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVE7Z0JBQzVDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTzthQUN0QixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDOzhHQTFEVSxvQkFBb0I7a0dBQXBCLG9CQUFvQjs7MkZBQXBCLG9CQUFvQjtrQkFKaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsVUFBVSxFQUFFLElBQUk7aUJBQ2pCOzhCQUV1QixJQUFJO3NCQUF6QixLQUFLO3VCQUFDLGFBQWE7Z0JBQ1UsUUFBUTtzQkFBckMsS0FBSzt1QkFBQyxxQkFBcUI7Z0JBQ0MsT0FBTztzQkFBbkMsS0FBSzt1QkFBQyxvQkFBb0I7Z0JBQ0MsTUFBTTtzQkFBakMsS0FBSzt1QkFBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEluamVjdG9yLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIGluamVjdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250ZW50LCBpc0NvbXBvbmVudCwgaXNTdHJpbmcsIFZpZXdSZWYgfSBmcm9tICcuLi92aWV3cy90eXBlcyc7XG5pbXBvcnQgeyBWaWV3U2VydmljZSB9IGZyb20gJy4uL3ZpZXdzL3ZpZXcnO1xuaW1wb3J0IHsgQ29tcFJlZiB9IGZyb20gJy4uL3ZpZXdzL2NvbXAtcmVmJztcbmltcG9ydCB7IER5bmFtaWNWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi9keW5hbWljLXZpZXcuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2R5bmFtaWNWaWV3XScsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNWaWV3RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgnZHluYW1pY1ZpZXcnKSB2aWV3OiBDb250ZW50O1xuICBASW5wdXQoJ2R5bmFtaWNWaWV3SW5qZWN0b3InKSBpbmplY3RvcjogSW5qZWN0b3I7XG4gIEBJbnB1dCgnZHluYW1pY1ZpZXdDb250ZXh0JykgY29udGV4dDogYW55O1xuICBASW5wdXQoJ2R5bmFtaWNWaWV3SW5wdXRzJykgaW5wdXRzOiBSZWNvcmQ8YW55LCBhbnk+O1xuXG4gIHByaXZhdGUgdmlld1JlZjogVmlld1JlZjtcbiAgcHJpdmF0ZSBkZWZhdWx0VHBsOiBUZW1wbGF0ZVJlZjxhbnk+ID0gaW5qZWN0KFRlbXBsYXRlUmVmKTtcbiAgcHJpdmF0ZSB2Y3IgPSBpbmplY3QoVmlld0NvbnRhaW5lclJlZik7XG4gIHByaXZhdGUgdmlld1NlcnZpY2UgPSBpbmplY3QoVmlld1NlcnZpY2UpO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmVzb2x2ZUNvbnRlbnRUeXBlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgY29uc3Qgdmlld0NoYW5nZWQgPSBjaGFuZ2VzLnZpZXcgJiYgIWNoYW5nZXMudmlldy5pc0ZpcnN0Q2hhbmdlKCk7XG4gICAgY29uc3QgY29udGV4dENoYW5nZWQgPSBjaGFuZ2VzLmNvbnRleHQgJiYgIWNoYW5nZXMuY29udGV4dC5pc0ZpcnN0Q2hhbmdlKCk7XG4gICAgY29uc3QgaW5wdXRzQ2hhbmdlZCA9IGNoYW5nZXMuaW5wdXRzICYmICFjaGFuZ2VzLmlucHV0cy5pc0ZpcnN0Q2hhbmdlKCk7XG5cbiAgICBpZiAodmlld0NoYW5nZWQpIHtcbiAgICAgIHRoaXMucmVzb2x2ZUNvbnRlbnRUeXBlKCk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0Q2hhbmdlZCkge1xuICAgICAgdGhpcy52aWV3UmVmLnVwZGF0ZUNvbnRleHQodGhpcy5jb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKGlzQ29tcG9uZW50KHRoaXMudmlldykgJiYgaW5wdXRzQ2hhbmdlZCkge1xuICAgICAgKHRoaXMudmlld1JlZiBhcyBDb21wUmVmPGFueT4pLnNldElucHV0cyh0aGlzLmlucHV0cyB8fCB7fSk7XG4gICAgfVxuICB9XG5cbiAgcmVzb2x2ZUNvbnRlbnRUeXBlKCkge1xuICAgIHRoaXMudmlld1JlZj8uZGVzdHJveSgpO1xuICAgIGlmIChpc1N0cmluZyh0aGlzLnZpZXcpKSB7XG4gICAgICB0aGlzLnZpZXdSZWYgPSB0aGlzLnZpZXdTZXJ2aWNlLmNyZWF0ZUNvbXBvbmVudChEeW5hbWljVmlld0NvbXBvbmVudCwge1xuICAgICAgICB2Y3I6IHRoaXMudmNyLFxuICAgICAgICBpbmplY3RvcjogdGhpcy5pbmplY3RvcixcbiAgICAgIH0pO1xuICAgICAgKHRoaXMudmlld1JlZiBhcyBDb21wUmVmPER5bmFtaWNWaWV3Q29tcG9uZW50Pikuc2V0SW5wdXQoJ2NvbnRlbnQnLCB0aGlzLnZpZXcpLmRldGVjdENoYW5nZXMoKTtcbiAgICB9IGVsc2UgaWYgKGlzQ29tcG9uZW50KHRoaXMudmlldykpIHtcbiAgICAgIHRoaXMudmlld1JlZiA9IHRoaXMudmlld1NlcnZpY2UuY3JlYXRlQ29tcG9uZW50KHRoaXMudmlldywge1xuICAgICAgICB2Y3I6IHRoaXMudmNyLFxuICAgICAgICBpbmplY3RvcjogdGhpcy5pbmplY3RvciA/PyB0aGlzLnZjci5pbmplY3RvcixcbiAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLmlucHV0cykge1xuICAgICAgICAodGhpcy52aWV3UmVmIGFzIENvbXBSZWY8YW55Pikuc2V0SW5wdXRzKHRoaXMuaW5wdXRzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52aWV3UmVmID0gdGhpcy52aWV3U2VydmljZS5jcmVhdGVWaWV3KHRoaXMudmlldyB8fCB0aGlzLmRlZmF1bHRUcGwsIHtcbiAgICAgICAgdmNyOiB0aGlzLnZjcixcbiAgICAgICAgaW5qZWN0b3I6IHRoaXMuaW5qZWN0b3IgPz8gdGhpcy52Y3IuaW5qZWN0b3IsXG4gICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMudmlld1JlZj8uZGVzdHJveSgpO1xuICB9XG59XG4iXX0=