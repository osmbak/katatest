import { Component } from '@angular/core';
export class ToastConfig {
    constructor() {
        /**
         * Sets the reverse order for hot-toast stacking
         *
         * @default false
         */
        this.reverseOrder = false;
        /**
         * Sets the number of toasts visible.
         * 0 will set no limit.
         * @default 5
         * @since 6.1.0
         */
        this.visibleToasts = 5;
        /**
         * Sets the type of stacking
         * @default "vertical"
         * @since 6.1.0
         */
        this.stacking = 'vertical';
        this.ariaLive = 'polite';
        this.role = 'status';
        this.position = 'top-center';
        this.autoClose = true;
        this.theme = 'toast';
        this.attributes = {};
        // key in ToastType
        this.info = { content: '' };
        this.success = { content: '' };
        this.error = { content: '' };
        this.loading = { content: '' };
        this.blank = { content: '' };
        this.warning = { content: '' };
    }
}
const isFunction = (valOrFunction) => typeof valOrFunction === 'function';
const isAngularComponent = (arg) => {
    return (typeof arg === 'function' && arg.decorators && arg.decorators.some((decorator) => decorator.type === Component));
};
export const resolveValueOrFunction = (valOrFunction, arg) => isAngularComponent(valOrFunction)
    ? valOrFunction
    : isFunction(valOrFunction)
        ? valOrFunction(arg)
        : valOrFunction;
export class ToastPersistConfig {
    constructor() {
        /**
         *In which storage id vs. counts should be stored
         *
         * @type {('local' | 'session')}
         * @memberof ToastPersistConfig
         * @default 'local'
         */
        this.storage = 'local';
        /**
         *The key pattern to store object in storage. `${id}` in pattern is replaced with actual toast id.
         *
         * @type {('local' | 'session')}
         * @memberof ToastPersistConfig
         * @default 'ngneat/hottoast-${id}'
         */
        this.key = 'ngneat/hototast-${id}';
        /**
         *The number of toasts allowed to show.
         *
         * @memberof ToastPersistConfig
         * @default 1
         */
        this.count = 1;
        this.enabled = false;
    }
}
//# sourceMappingURL=data:application/json;base64,